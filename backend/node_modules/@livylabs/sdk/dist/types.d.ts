/**
 * Configuration options for creating an SDK client.
 */
export interface SDKConfig {
    /** Your API key for authentication (required) */
    apiKey: string;
    /** Base URL for API endpoints (optional, defaults to https://console.livylabs.xyz/api/proxy) */
    baseUrl?: string;
    /** Request timeout in milliseconds (optional, defaults to 30000) */
    timeout?: number;
    /** Number of retry attempts for failed requests (optional, defaults to 3) */
    retries?: number;
}
/**
 * Parameters for executing a service with optional attestation and data availability.
 */
export interface RunParams {
    /** Unique identifier for the service to execute */
    serviceId: string;
    /** Key-value pairs of parameters to pass to the service (optional) */
    params?: Record<string, any>;
    /** Whether to generate an attestation for this execution (default: true) */
    withAttestation?: boolean;
    /** Whether to post execution data to data availability layer (default: false) */
    postToDataAvailability?: boolean;
}
/**
 * Result of a service execution with optional cryptographic attestation.
 *
 * Contains the execution results and provides methods to verify the
 * cryptographic integrity of the attestation (if present).
 */
export interface AttestationResult {
    /** Status of the execution */
    status: string;
    /** The output from the service execution */
    output: string;
    /** Cryptographic attestation quote and related data (only present if withAttestation was true) */
    quote?: {
        /** Base64-encoded attestation quote */
        quote: string;
        /** Event log entries */
        eventLog: string;
        /** Runtime Measurement Registers (RTMRs) */
        rtmrs: string[];
    };
    /** The service that was executed */
    serviceId: string;
    /** Parameters that were passed to the service */
    params: Record<string, any>;
    /** Whether attestation was generated for this execution */
    withAttestation: boolean;
    /** Whether execution data was posted to data availability layer */
    postedToDataAvailability: boolean;
    /** Data availability posting result (only present if postToDataAvailability was true) */
    dataAvailabilityResult?: DataAvailabilityResult;
    /**
     * Verifies the cryptographic integrity of the attestation.
     *
     * @returns Promise that resolves to true if attestation is valid, false if invalid or not present
     * @throws {SDKError} When verification process fails or no attestation is available
     */
    verifyAttestation(): Promise<boolean>;
}
/**
 * Main client interface for executing services with optional attestation verification.
 */
export interface Client {
    /**
     * Executes a service on the server with optional attestation and data availability posting.
     *
     * This method validates the input parameters, makes an HTTP request to the execution
     * endpoint, and wraps the response in an AttestationResult object that provides
     * cryptographic verification capabilities (if attestation was enabled).
     *
     * @param {RunParams} params - Parameters for the service execution
     *
     * @returns Promise resolving to an AttestationResult with verification capabilities
     *
     * @throws {Error} When required parameters are missing or invalid
     * @throws {SDKError} When the HTTP request or execution fails
     *
     * @example
     * ```typescript
     * // With parameters
     * const result = await client.run({
     *   serviceId: 'f8577eaf-8a57-4c30-b5ed-9e74bd56f964',
     *   params: {
     *     input: 'Hello world',
     *     option: 'fast'
     *   },
     *   withAttestation: true,
     *   postToDataAvailability: false
     * });
     *
     * // Without parameters
     * const result2 = await client.run({
     *   serviceId: 'another-service-id',
     *   withAttestation: true
     * });
     *
     * const isValid = await result.verifyAttestation();
     * ```
     */
    run(params: RunParams): Promise<AttestationResult>;
    /**
     * Verifies a standalone attestation quote without requiring service execution.
     *
     * This method allows verification of attestation quotes that were obtained independently
     * of the service execution flow.
     *
     * @param {AttestationQuoteData} quoteData - The attestation quote data containing quote, event log, and RTMRs
     *
     * @returns Promise resolving to comprehensive verification results
     *
     * @throws {Error} When required quote data is missing or malformed
     * @throws {SDKError} When verification request fails or network issues occur
     *
     * @example
     * ```typescript
     * const client = createClient({ apiKey: 'your-api-key' });
     *
     * // Verify any attestation quote
     * const result = await client.verifyAttestation({
     *   quote: 'hex-encoded-attestation-quote',
     *   eventLog: '[{"imr":0,"event_type":...}]',
     *   rtmrs: ['rtmr0...', 'rtmr1...', 'rtmr2...', 'rtmr3...']
     * });
     *
     * console.log(result.message); // 'Quote verification successful!'
     * console.log(result.report_data); // Extracted report data
     * ```
     */
    verifyAttestation(quoteData: AttestationQuoteData): Promise<AttestationVerificationResult>;
    /**
     * Posts data to the Celestia data availability layer.
     *
     * This method sends data to be stored on Celestia's data availability network.
     * The data can be any JSON-serializable content and will be published to the
     * specified namespace (or the default Livy namespace if none is provided).
     *
     * @param {any} data - Data to post to Celestia (can be string or any JSON-serializable data)
     * @param {string} [namespace] - Optional hex namespace (defaults to custom Livy namespace)
     *
     * @returns Promise resolving to Celestia publication result including block height and namespace
     *
     * @throws {Error} When required data is missing
     * @throws {SDKError} When the publication request fails
     *
     * @example
     * ```typescript
     * const client = createClient({ apiKey: 'your-api-key' });
     *
     * // Post string data
     * const result1 = await client.postToDataAvailability('Hello, Celestia!');
     *
     * // Post JSON data with custom namespace
     * const result2 = await client.postToDataAvailability(
     *   { message: 'attestation data', timestamp: Date.now() },
     *   '0000000000000000000000000000000000000000000000000004C697679'
     * );
     *
     * console.log(`Data published at height: ${result2.height}`);
     * ```
     */
    postToDataAvailability(data: any, namespace?: string): Promise<DataAvailabilityResult>;
    /**
     * Gets blob data from Celestia using attestation result information.
     *
     * This method retrieves blob data that was previously posted to Celestia.
     * You can use the DataAvailabilityResult from an attestation result to get the data back.
     *
     * @param {CelestiaGetParams} params - Parameters for blob retrieval
     *
     * @returns Promise resolving to blob data from Celestia
     *
     * @throws {Error} When required parameters are missing
     * @throws {SDKError} When the retrieval request fails
     *
     * @example
     * ```typescript
     * const client = createClient({ apiKey: 'your-api-key' });
     *
     * // Get blob using attestation result
     * const attestationResult = await client.run({
     *   serviceId: 'service-id',
     *   postToDataAvailability: true
     * });
     *
     * if (attestationResult.dataAvailabilityResult) {
     *   const blobs = await client.getFromCelestia({
     *     height: attestationResult.dataAvailabilityResult.height,
     *     commitment: attestationResult.dataAvailabilityResult.commitment as string
     *   });
     *
     *   console.log('Retrieved blobs:', blobs.blobs);
     * }
     * ```
     */
    getFromCelestia(params: CelestiaGetParams): Promise<CelestiaGetResult>;
}
/**
 * Raw response data from the proxy execution API endpoint.
 *
 * This interface represents the JSON structure returned by the proxy server
 * before it's wrapped in an AttestationResult object.
 */
export interface ExecutionResponseData {
    /** Status of the execution */
    status: string;
    /** The output from the service execution */
    output: any;
    /** Cryptographic attestation quote and related data (if present) */
    quote?: {
        /** Base64-encoded attestation quote */
        quote: string;
        /** Event log entries */
        eventLog: string;
        /** Runtime Measurement Registers (RTMRs) */
        rtmrs: string[];
    };
}
/**
 * Structured error codes used throughout the SDK.
 *
 * These codes provide a programmatic way to handle different types of errors
 * that can occur during SDK operations.
 */
export type SDKErrorCode = 
/** Authentication failed - invalid or missing API key */
'INVALID_API_KEY'
/** Specified service ID does not exist */
 | 'SERVICE_NOT_FOUND'
/** Service parameters are malformed or invalid */
 | 'INVALID_PARAMS'
/** Server failed to generate attestation */
 | 'ATTESTATION_FAILED'
/** Attestation verification failed */
 | 'VERIFICATION_FAILED'
/** HTTP request failed due to network issues */
 | 'NETWORK_ERROR'
/** Request exceeded timeout limit */
 | 'TIMEOUT_ERROR';
/**
 * Attestation quote data structure for standalone verification.
 *
 * Contains the raw attestation quote and associated data needed for cryptographic
 * verification without requiring a service execution context.
 */
export interface AttestationQuoteData {
    /** Raw attestation quote in hexadecimal format */
    quote: string;
    /** Event log entries as JSON string containing measurement events */
    eventLog: string;
    /** Pre-extracted Runtime Measurement Registers (RTMRs) as hex strings */
    rtmrs: string[];
}
/**
 * Result of attestation quote verification process.
 *
 * Contains the verification message and extracted report data from the quote.
 */
export interface AttestationVerificationResult {
    /** Verification status message from the verification service */
    message: string;
    /**
     * Report data extracted from the attestation quote
     * Contains the cryptographic report data embedded in the quote
     */
    report_data?: string;
}
/**
 * Result of posting data to Celestia data availability layer.
 */
export interface DataAvailabilityResult {
    /** Whether the operation was successful */
    success: boolean;
    /** Block height where the data was included */
    height: number;
    /** Base64 namespace ID used */
    namespace: string;
    /** Blob commitment (if available) */
    commitment?: string;
    /** Success message */
    message: string;
}
/**
 * Parameters for retrieving blob data from Celestia.
 */
export interface CelestiaGetParams {
    /** Block height to retrieve blobs from */
    height: number;
    /** Blob commitment for specific blob retrieval */
    commitment: string;
}
/**
 * Result of retrieving blob data from Celestia.
 */
export interface CelestiaGetResult {
    /** Whether the operation was successful */
    success: boolean;
    /** Base64 namespace ID used */
    namespace: string;
    /** Block height */
    height: number;
    /** Blob commitment */
    commitment: string;
    /** Retrieved blob data */
    blobs: CelestiaBlob[];
    /** Number of blobs retrieved */
    count: number;
}
/**
 * Individual blob data from Celestia.
 */
export interface CelestiaBlob {
    /** Raw base64 blob data */
    data: string | null;
    /** Decoded UTF-8 data */
    decodedData: any;
    /** Blob commitment */
    commitment: string;
    /** Namespace ID */
    namespace: string;
    /** Index of the blob */
    index: number;
    /** Share version */
    share_version: number;
}
