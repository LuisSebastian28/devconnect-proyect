"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createClient = exports.SDKError = void 0;
const client_1 = require("./client");
// Export types
__exportStar(require("./types"), exports);
var errors_1 = require("./errors");
Object.defineProperty(exports, "SDKError", { enumerable: true, get: function () { return errors_1.SDKError; } });
/**
 * Creates an authenticated SDK client for executing services with optional attestation verification.
 *
 * This is the main entry point for the SDK. The client provides methods to execute services
 * on remote servers with optional cryptographic attestations and data availability posting,
 * as well as standalone attestation verification.
 *
 * @param config - Configuration object containing API key and optional settings
 * @param config.apiKey - Your API key for authentication (required)
 * @param config.baseUrl - Base URL for the API endpoints (optional, defaults to https://console.livylabs.xyz/api/proxy)
 * @param config.timeout - Request timeout in milliseconds (optional, defaults to 30000)
 * @param config.retries - Number of retry attempts for failed requests (optional, defaults to 3)
 *
 * @returns A configured client instance ready to make service execution requests and verify attestations
 *
 * @throws {Error} When API key is missing or invalid
 *
 * @example
 * ```typescript
 * const client = createClient({
 *   apiKey: 'your-api-key-here'
 * });
 * ```
 */
function createClient(config) {
    if (!config.apiKey) {
        throw new Error('API key is required');
    }
    return new client_1.SDKClient(config);
}
exports.createClient = createClient;
// Default export for convenience
exports.default = {
    createClient,
};
