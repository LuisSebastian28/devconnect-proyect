import { SDKErrorCode } from './types';
/**
 * Custom error class for all SDK-related errors.
 *
 * Extends the standard Error class with structured error codes and optional HTTP status codes.
 * This allows for programmatic error handling based on error types rather than parsing error messages.
 */
export declare class SDKError extends Error {
    /** Machine-readable error code indicating the type of error */
    readonly code: SDKErrorCode;
    /** HTTP status code if the error originated from an HTTP response */
    readonly status?: number;
    /**
     * Creates a new SDK error with structured error information.
     *
     * @param code - Machine-readable error code
     * @param message - Human-readable error description
     * @param status - Optional HTTP status code if applicable
     */
    constructor(code: SDKErrorCode, message: string, status?: number);
    /**
     * Creates an appropriate SDKError based on HTTP status code.
     *
     * Maps common HTTP status codes to meaningful SDK error codes for easier error handling.
     *
     * @param status - HTTP status code from the response
     * @param message - Optional custom error message
     * @returns SDKError with appropriate error code
     */
    static fromHttpStatus(status: number, message?: string): SDKError;
    /**
     * Creates a network error for connection and request failures.
     *
     * @param message - Description of the network error
     * @returns SDKError with NETWORK_ERROR code
     */
    static networkError(message: string): SDKError;
    /**
     * Creates a timeout error for requests that exceed time limits.
     *
     * @param message - Optional custom timeout message
     * @returns SDKError with TIMEOUT_ERROR code
     */
    static timeoutError(message?: string): SDKError;
    /**
     * Creates a verification error for failed attestation verification.
     *
     * @param message - Optional custom verification error message
     * @returns SDKError with VERIFICATION_FAILED code
     */
    static verificationFailed(message?: string): SDKError;
}
