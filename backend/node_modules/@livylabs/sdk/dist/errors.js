"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDKError = void 0;
/**
 * Custom error class for all SDK-related errors.
 *
 * Extends the standard Error class with structured error codes and optional HTTP status codes.
 * This allows for programmatic error handling based on error types rather than parsing error messages.
 */
class SDKError extends Error {
    /**
     * Creates a new SDK error with structured error information.
     *
     * @param code - Machine-readable error code
     * @param message - Human-readable error description
     * @param status - Optional HTTP status code if applicable
     */
    constructor(code, message, status) {
        super(message);
        this.name = 'SDKError';
        this.code = code;
        this.status = status;
        // Maintains proper stack trace for where our error was thrown (only available on V8)
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, SDKError);
        }
    }
    /**
     * Creates an appropriate SDKError based on HTTP status code.
     *
     * Maps common HTTP status codes to meaningful SDK error codes for easier error handling.
     *
     * @param status - HTTP status code from the response
     * @param message - Optional custom error message
     * @returns SDKError with appropriate error code
     */
    static fromHttpStatus(status, message) {
        switch (status) {
            case 401:
            case 403:
                return new SDKError('INVALID_API_KEY', message || 'Authentication failed', status);
            case 404:
                return new SDKError('SERVICE_NOT_FOUND', message || 'Service not found', status);
            case 400:
                return new SDKError('INVALID_PARAMS', message || 'Invalid parameters provided', status);
            case 408:
                return new SDKError('TIMEOUT_ERROR', message || 'Request timeout', status);
            case 500:
                return new SDKError('ATTESTATION_FAILED', message || 'Server failed to generate attestation', status);
            default:
                return new SDKError('NETWORK_ERROR', message || `HTTP ${status} error`, status);
        }
    }
    /**
     * Creates a network error for connection and request failures.
     *
     * @param message - Description of the network error
     * @returns SDKError with NETWORK_ERROR code
     */
    static networkError(message) {
        return new SDKError('NETWORK_ERROR', message);
    }
    /**
     * Creates a timeout error for requests that exceed time limits.
     *
     * @param message - Optional custom timeout message
     * @returns SDKError with TIMEOUT_ERROR code
     */
    static timeoutError(message = 'Request timeout') {
        return new SDKError('TIMEOUT_ERROR', message);
    }
    /**
     * Creates a verification error for failed attestation verification.
     *
     * @param message - Optional custom verification error message
     * @returns SDKError with VERIFICATION_FAILED code
     */
    static verificationFailed(message = 'Attestation verification failed') {
        return new SDKError('VERIFICATION_FAILED', message);
    }
}
exports.SDKError = SDKError;
