import { RunParams, ExecutionResponseData, DataAvailabilityResult, CelestiaGetParams, CelestiaGetResult } from './types';
/**
 * Configuration for the HTTP client.
 */
interface HttpClientConfig {
    /** API key for authentication */
    apiKey: string;
    /** Base URL for API endpoints */
    baseUrl: string;
    /** Request timeout in milliseconds */
    timeout: number;
    /** Number of retry attempts */
    retries: number;
}
/**
 * HTTP client for making authenticated requests to the Livy SDK API.
 *
 * Handles authentication, retry logic with exponential backoff, timeout management,
 * and error mapping from HTTP responses to structured SDK errors.
 */
export declare class HttpClient {
    private config;
    /**
     * Creates a new HTTP client with the specified configuration.
     *
     * @param config - HTTP client configuration including API key and request settings
     */
    constructor(config: HttpClientConfig);
    /**
     * Makes an authenticated request to the service execution endpoint.
     *
     * Sends a POST request to execute a service with optional attestation and data availability posting.
     * Uses the SDK endpoint format with serviceId in the request body.
     *
     * @param params - Execution parameters containing service ID, params, and execution options
     * @returns Promise resolving to the raw execution response data
     * @throws {SDKError} When the request fails or returns an error status
     */
    run(params: RunParams): Promise<ExecutionResponseData>;
    /**
     * Makes a request to the attestation verification endpoint.
     *
     * Sends a POST request to verify an attestation quote using the SDK verification service.
     * This endpoint is used for standalone attestation verification.
     *
     * @param verificationData - The verification payload containing quote, eventLog, and RTMRs
     * @returns Promise resolving to the verification response data
     * @throws {SDKError} When the request fails or returns an error status
     */
    verify(verificationData: any): Promise<any>;
    /**
     * Posts data to the Celestia data availability layer.
     *
     * Sends a POST request to publish data to Celestia through the /celestia/publish endpoint.
     *
     * @param data - Data to post to Celestia (can be string or any JSON-serializable data)
     * @param namespace - Optional hex namespace (defaults to custom Livy namespace)
     * @returns Promise resolving to Celestia publication result
     * @throws {SDKError} When the request fails or returns an error status
     */
    postToDataAvailability(data: any, namespace?: string): Promise<DataAvailabilityResult>;
    /**
     * Gets blob data from the Celestia data availability layer.
     *
     * Sends a POST request to retrieve blob data from Celestia through the /celestia/get endpoint.
     *
     * @param params - Parameters for blob retrieval including height, commitment, namespace, or height range
     * @returns Promise resolving to Celestia retrieval result
     * @throws {SDKError} When the request fails or returns an error status
     */
    getFromCelestia(params: CelestiaGetParams): Promise<CelestiaGetResult>;
    /**
     * Makes an HTTP request with retry logic and error handling.
     *
     * Implements exponential backoff for retries, handles various error conditions,
     * and converts HTTP errors to structured SDK errors.
     *
     * @param url - Target URL for the request
     * @param options - Fetch options including method, headers, and body
     * @returns Promise resolving to the parsed JSON response
     * @throws {SDKError} When all retry attempts are exhausted or non-retryable errors occur
     */
    private makeRequest;
    /**
     * Creates a delay for retry operations.
     *
     * @param ms - Number of milliseconds to delay
     * @returns Promise that resolves after the specified delay
     */
    private delay;
    /**
     * Builds the headers for authenticated requests.
     *
     * @returns Object containing headers for authentication and content type
     */
    private buildHeaders;
}
export {};
