"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttestationResultImpl = void 0;
const errors_1 = require("./errors");
/**
 * Implementation of AttestationResult that provides cryptographic verification capabilities.
 *
 * This class wraps the raw execution response data from the Livy proxy and provides methods to verify
 * the cryptographic integrity of the attestation (if present) using the included quote data.
 */
class AttestationResultImpl {
    /**
     * Creates a new AttestationResult from raw response data.
     *
     * @param data - Raw execution response data from the proxy API
     * @param serviceId - The service ID that was executed
     * @param params - The parameters that were passed
     * @param withAttestation - Whether attestation was requested
     * @param postedToDataAvailability - Whether data was posted to DA layer
     * @param baseUrl - Base URL for making verification requests
     * @param dataAvailabilityResult - Result from DA posting (if any)
     */
    constructor(data, serviceId, params, withAttestation, postedToDataAvailability, baseUrl, dataAvailabilityResult) {
        this.status = data.status;
        this.output = data.output;
        this.quote = data.quote;
        this.serviceId = serviceId;
        this.params = params;
        this.withAttestation = withAttestation;
        this.postedToDataAvailability = postedToDataAvailability;
        this.dataAvailabilityResult = dataAvailabilityResult;
        this.baseUrl = baseUrl;
    }
    /**
     * Verifies the cryptographic integrity of the attestation.
     *
     * This method sends the attestation quote data to the Livy console verification endpoint
     * which performs the actual cryptographic verification using proper attestation services.
     *
     * @returns Promise that resolves to true if the attestation is valid, false otherwise
     * @throws {SDKError} When the verification process encounters an error
     *
     * @example
     * ```typescript
     * const result = await client.run({...});
     * const isValid = await result.verifyAttestation();
     * if (isValid) {
     *   console.log('Attestation is cryptographically valid');
     * }
     * ```
     */
    async verifyAttestation() {
        try {
            // Check if attestation is available
            if (!this.withAttestation || !this.quote) {
                throw errors_1.SDKError.verificationFailed('No attestation available for verification');
            }
            // Validate that we have the required quote data
            if (!this.quote.quote || !this.quote.eventLog || !this.quote.rtmrs) {
                throw errors_1.SDKError.verificationFailed('Incomplete attestation quote data');
            }
            // Validate RTMRs
            if (!Array.isArray(this.quote.rtmrs) || this.quote.rtmrs.length !== 4) {
                throw errors_1.SDKError.verificationFailed('Invalid RTMR data - expected 4 RTMRs');
            }
            // Prepare the verification request payload
            const verificationPayload = {
                quote: this.quote.quote,
                eventLog: this.quote.eventLog,
                rtmrs: this.quote.rtmrs,
                rtms: this.quote.rtmrs.join(',') // Comma-separated string format
            };
            // Make the verification request using the dynamic baseUrl
            const verificationUrl = `${this.baseUrl}/verify`;
            const response = await fetch(verificationUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(verificationPayload)
            });
            if (!response.ok) {
                const errorText = await response.text();
                let errorMessage;
                try {
                    const errorJson = JSON.parse(errorText);
                    errorMessage = errorJson.message || errorJson.error || errorText;
                }
                catch {
                    errorMessage = errorText;
                }
                throw errors_1.SDKError.verificationFailed(`Verification request failed: ${errorMessage}`);
            }
            const verificationResult = await response.json();
            // Check if verification was successful
            if (verificationResult.message && verificationResult.message.includes('successful')) {
                return true;
            }
            else {
                return false;
            }
        }
        catch (error) {
            if (error instanceof errors_1.SDKError) {
                throw error;
            }
            throw errors_1.SDKError.verificationFailed(`Verification failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
    }
}
exports.AttestationResultImpl = AttestationResultImpl;
